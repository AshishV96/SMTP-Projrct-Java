/*******************************************************************************
 * Copyright 2016 Sparta Systems, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

group = 'com.spartasystems.holdmail'
version = '0.0.1-SNAPSHOT'
description = 'holdmail'


buildscript {

    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/release' }
        maven { url 'https://plugins.gradle.org/m2' }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'
        classpath 'gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.2.1'
        classpath "gradle.plugin.com.netflix.nebula:gradle-ospackage-plugin:3.6.1"
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/release' }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "jacoco"
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'
apply plugin: "org.nosphere.apache.rat"
apply plugin: "nebula.ospackage"
apply plugin: 'com.moowork.node'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'


dependencies {

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }

    compile group: 'com.h2database', name: 'h2', version: '1.4.192'
    compile group: 'org.subethamail', name: 'subethasmtp', version: '3.1.7'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.apache.james', name: 'apache-mime4j', version: '0.7.2'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '4.0.3'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.4.1'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1'
    testCompile group: 'io.rest-assured', name:'rest-assured', version: '3.0.0'
    testCompile group: 'io.rest-assured', name:'spring-mock-mvc', version: '3.0.0'
    testCompile group: 'io.rest-assured', name:'json-schema-validator', version: '3.0.0'
    testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.2.1'
    testCompile(group: 'org.dbunit', name: 'dbunit', version: '2.5.1') {
        exclude(module: 'junit')
    }
}

springBoot {
    executable = true
    excludeDevtools = true
    layout = 'ZIP' // puts PropertiesLauncher in manifest, needed to support loader.dir
}

rat {
    excludes = [
            'node_modules/**',
            '.idea/**',
            'README.md',
            'src/main/resources/static/js/bundle/holdmail.js',
            'src/main/resources/db/migration/*.sql',
            'src/test/resources/mails/**',
            'scripts/rpm/**',
            '**/.gradle/**',
            '**gradle**',
            '**/build/**',
            '**/*.json'
    ]
}

jar {
    from { ['LICENSE', 'NOTICE'] }
}

def RPM_INSTALL_DIR = '/opt/holdmail'
def RPM_USER = 'holdmail'
def RPM_GROUP = 'holdmail'

// guide:
// https://github.com/nebula-plugins/gradle-ospackage-plugin/wiki/Usage-Example
ospackage {
    packageName = "${project.name}"
    version = "${project.version}".replace("-SNAPSHOT","")
    release = 1
    arch = NOARCH
    os = LINUX
    type = BINARY

    preInstall file('scripts/rpm/preInstall.sh')
    postInstall file('scripts/rpm/postInstall.sh')
    preUninstall file('scripts/rpm/preUninstall.sh')
    postUninstall file('scripts/rpm/postUninstall.sh')

    into RPM_INSTALL_DIR
    user RPM_USER
    permissionGroup RPM_GROUP

    from(jar.outputs.files) {
        rename { String f -> f.replace("-${project.version}", "") }
        into 'bin'
        fileMode = 0500
    }

    // Spring boot will look for conf files in the same dir as the app JAR file
    // see 'CONF_FOLDER' in http://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
    from("scripts/bin") {
        fileType CONFIG | NOREPLACE
        into "bin"
    }

}

buildRpm {

    user RPM_USER
    permissionGroup RPM_GROUP

    // we can do this because the springBoot plugin above makes the jar executable
    link('/etc/init.d/holdmail', RPM_INSTALL_DIR + '/bin/holdmail.jar')
}


compileJava.dependsOn('npmInstall')
tasks.build.dependsOn('buildRpm')

task srcJAR(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

task docJAR(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives srcJAR
    archives docJAR
}

